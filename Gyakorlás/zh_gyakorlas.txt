SQL:
1.
SELECT RANK() OVER(ORDER BY COUNT(*) DESC), f.UGYFEL_FK, v.NEV, COUNT(*)
FROM Foglalas f JOIN Venged v ON f.UGYFEL_FK = v.USERNEV
GROUP BY f.UGYFEL_FK, v.NEV

2.
SELECT v.NEV, v.EMAIL,COUNT(*)
FROM Foglalas f JOIN Vendeg v ON f.UGYFEL_FK = v.USERNEV
WHERE v.SZUL_DAT NOT LIKE '%05%'
HAVING COUNT(*) > 1

3.
SELECT v.*
FROM Foglalas f JOIN Vendeg v ON f.UGYFEL_FK = v.USERNEV
                JOIN Szoba sz ON f.SZOBA = sz.SZOBA_ID
WHERE sz.FEROHELY =
(
    SELCT MAX(sz.FEROHELY)
    FRROM Szoba
    WHERE KILMAS = 'i'
)

MONGODB:
1. feladat
db["users"].find({"email": {$regex: /.com/i}}, {"email": 1, "name": 1, "_id": 0})

2.feladat
db["movies"].find({$and: [{"genres": {$in: ["Short"]}}, {"$and": [{"year": {$gte: 1945}}, {"year": {$lte: 1970}}]}]}, {"title":1, "year":1, "_id":0}).sort({"year": 1}, {"title": 1})

3.feladat
db.movies.aggregate([{$match: {runtime: { $gte: 50, $lte: 100 }}},{$group: {_id: "$year", avg_mflix_comments: { $avg:"$num_mflix_comments" }}},{$project: {year: "$_id", avg_mflix_comments: 1, _id: 0}},{$sort: { year: 1 }}])

4.
db["movies"].aggregate([{$unwind: "$genres"}, {$group: {_id: "$genres", avgRating: {$avg: "$imdb.rating"}}}])

5.
db["movies"].find({"title": {$regex: /Love/i}}, {"title": 1, "year": 1, "genres":1, "_id": 0})

6.
db["movies"].find({"title": {$regex: /^The/}}, {"title": 1}).sort({"year": -1})

7.
db.movies.aggregate([{$project: {title: 1, runtime: 1, lengthCategory: {$cond: { if: { $gte: ["$runtime", 90] }, then: "hosszú", else: "rövid" }}}}])

8.
db.["comments".aggregat([{$group: {_id:"$email", count: {$sum:1}}}, {$match: {count: {$gt: 10}}}])

NEO4J:
1.
MATCH(m:Movie)
WHERE m.title CONTAINS 'The' AND m.released > 1990
RETURN m.title, m.released

2.
MATCH(p:Person) - [:ACTED_IN] -> (m:Movie)
WHERE p.name = 'Tom Hanks'
RETURN p.name, COUNT(m)

VAGY

MATCH(p:Person {name: 'Tom Hanks'}) - [:ACTED_IN] -> (m:Movie)
RETURN p.name, COUNT(m)

3.
MATCH(p:Person) - [:ACTED_IN] ->(m:Movie)
WITH p.name AS Nev, COUNT(m) AS Szam
WHERE Szam >=3
RETURN Nev, Szam

4.
MATCH(m:Movie)
RETURN m.title,
    CASE 
        WHEN m.released < 2000 THEN 'Régi'
         ELSE 'Új' 
    END AS Kategoria

5.feladat
MATCH (p:Person) -[:ACTED_IN] -> (m:Movie)
WITH p.name AS nev, m.title AS cím, m.released AS megjelenés
WHERE megjelenés > 1960
RETURN nev, cím, megjelenés
ORDER BY megjelenés DESC

6.feladat
MATCH (p:Person) -[:ACTED_IN] -> (m:Movie)
WITH p.name AS nev, m.title AS cím, m.released AS megjelenés
WHERE megjelenés > 1970 OR cím CONTAINS "Love"
RETURN nev, cím
ORDER BY cím DESC

7.feladat
MATCH (p:Person) -[:ACTED_IN] -> (m:Movie)
RETURN m.title, COUNT(p.name)
ORDER BY COUNT(p.name) DESC
LIMIT 1

8.
MATCH(p:PERSON)
WHERE NOT EXISTS {
    MATCH(p) -[:ACTED_IN] -> (m.:Movie) <- [:ACTED_IN] - (p2:PERSON {name: 'Tom Hanks'})
RETURN DISTINCT p.name

REDIS
1. 
SET ev 2021 EX 10
SET honap 4 EX 10
SET nap 26 EX 10

GET ev/honap/nap //Lekérdezés

2.
HSET auto rendszam "xxx-111" tipus "Skoda Fabia" evjarat 2012 ertek 1500000

HGETALL auto //Lekérdezés

3.
RPUSH tantargyak "programozas alapjai" "matematika" "adatbaziskezeles"
RPUSH tantargyak "operacios rendszerek"

LRANGE tantargyak 0 1

4.
SADD numbers1 10 20 30 40 50 60
SADD numbers2 15 30 45 60
SINTER numbers1 numbers2

5.
ZADD szemelyek 15 Andras 20 Peter 18 Julia

ZCOUNT 16 18
ZRANGEBYSCORE 16 18 // Lekérdezés

6.
HMSET IRO ID 1 nev 'WHINCH ESZER' nemzetiseg 'magyar'
HMSET KONYV ID 1 cim 'programozas' mufaj 'oktatas' IRO_ID 1

CASSANDRA:
1.
SELECT COUNT(*) FROM movies_and_tv;

2.
SELECT title
FROM movies_and_tv
WHERE type = 'Moive' AND release_year = 2018

3.
SELECT type, release_year, COUNT(*) 
         ... FROM movies_and_tv 
         ... GROUP BY type, release_year;

4.
CREATE TABLE szemely (nev TEXT, szulev INT, foglalkozas TEXT) PRIMARY KEY((nev, szulev), foglalkozas));
INSERT INTO szemely (nev, szulev, foglalkozas) VALUES ( 'Kiss Béla', 2000, 'lakatos');
INSERT INTO szemely (nev, szulev, foglalkozas) VALUES ( 'Nagy Ivo', 1999, 'diák');
INSERT INTO szemely (nev, szulev, foglalkozas) VALUES ( 'Toth Ottó', 1980, 'pincer');

5.
ALTER TABLE szemely ADD vegzettseg LIST<TEXT>;
UPDATE Szemely set vegzettseg = vegzettseg + ['gepez', 'muszeresz'] 
WHERE nev = 'Kis Béla' AND szulev = 2000 AND foglalkozas = 'lakatos'

6.
SELECT title FROM movies_and_tv WHERE release_year = 2010 AND type = 'Movei' ORDER BY rating DESC LIMIT 10
